openapi: 3.0.0
info:
  title: Vocal Analyzer API
  description: 당신의 목소리를 분석해드립니다.
  version: '1.0.0'
servers:
  - url: http://localhost:8000
    description: Vocal Analyzer API Server
paths:
  /auth/join:
    post:
      tags:
        - Auth
      summary: 회원가입
      description: 사용자가 제출한 사용자 정보로 회원가입 진행
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                accountName:
                  type: string
                  description: 사용자 아이디
                  example: "user123"
                password:
                  type: string
                  description: 비밀번호
                  format: password
                  example: "123456"
                realName:
                  type: string
                  description: 사용자 이름
                  example: "홍길동"
                birthday:
                  type: string
                  format: date
                  description: 생년월일(YYYY-MM-DD)
                  example: "1990-01-01"
                gender:
                  type: string
                  description: 성별
                  example: "male"
                  enum: ["male", "female"]
                email:
                  type: string
                  format: email
                  description: 사용자 이메일
                  example: "useremail@example.com"
      responses:
        '201':
          description: 회원가입 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    description: 회원가입 성공을 알리는 코드
                    example: "JOIN_SUCCEEDED"
                  message:
                    type: string
                    description: 회원가입 성공을 알리는 메시지
                    example: "회원가입이 완료되었습니다. 로그인 해주세요."
        '200':
          description: 회원가입 실패(이미 가입된 계정)
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    description: 회원가입 실패를 알리는 코드
                    example: "JOIN_FAILED"
                  message:
                    type: string
                    description: 회원가입 실패를 알리는 메시지
                    example: "이미 가입된 회원입니다."
        '403':
          description: 이미 로그인 된 상태에서 회원가입을 진행한 경우
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    description: 이미 로그인 된 상태 때문에 회원가입에 실패했다는 것을 알리는 코드
                    example: "IS_LOGGED_IN"
        '500':
          description: 서버 에러

  /auth/withdrawal:
    delete:
      tags:
        - Auth
      summary: 회원탈퇴
      description: 데이터베이스에서 사용자 데이터를 삭제하여 회원탈퇴 진행
      security:
        - bearerAuth: []
      parameters:
        - in: header
          name: x-refresh-token
          schema:
            type: string
          description: 리프레시 토큰
          required: true
        - in: query
          name: accountName
          schema:
            type: string
          description: 사용자 아이디
          example: "user123"
          required: true
      responses:
        '200':
          description: 회원탈퇴 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    description: 회원탈퇴 성공을 알리는 코드
                    example: "WITHDRAWAL SUCCEEDED"
        '401':
          description: 액세스 토큰이 만료된 상태
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    description: 액세스 토큰 만료를 알리는 코드
                    example: "ACCESS_TOKEN_EXPIRED"      
        '403':
          description: 액세스 토큰이 만료된 경우를 제외하고, 액세스 토큰이 없거나 유효하지 않거나 중복로그인이 발생한 경우
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    description: 액세스 토큰이 유효하지 않음 등의 결과를 알리는 코드
                    example: "NO_ACCESS_TOKEN 또는 INVALID_ACCESS_TOKEN 또는 INVALID_LOGIN_SESSION_KEY"
        '500':
          description: 서버 에러

  /auth/login:
    post:
      tags:
        - Auth
      summary: 사용자 로그인
      description: 사용자 아이디와 비밀번호 입력하여 로그인을 진행
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                accountName:
                  type: string
                  description: 사용자 아이디
                  example: "user123"
                password:
                  type: string
                  description: 비밀번호
                  format: password
                  example: "123456"
      responses:
        '200':
          description: 로그인 성공 또는 실패(비밀번호 불일치, 이미 가입된 계정)
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    description: 로그인 결과(성공, 실패)를 알리는 코드
                    example: "LOGIN_SUCCEEDED 또는 LOGIN_FAILED"
                  message:
                    type: string
                    description: 로그인 실패한 경우에 한해 전송하는, 로그인 실패 원인을 알리는 메시지
                    example: "비밀번호가 일치하지 않습니다. 또는 가입되지 않은 계정입니다."
                  accessToken:
                    type: string
                    description: 로그인 성공한 경우에 한해 전송하는, 액세스 토큰
                  refreshToken:
                    type: string
                    description: 로그인 성공한 경우에 한해 전송하는, 리프레시 토큰
        '403':
          description: 이미 로그인 된 상태에서 로그인을 진행한 경우
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    description: 이미 로그인 된 상태 때문에 로그인에 실패했다는 것을 알리는 코드
                    example: "IS_LOGGED_IN"
        '500':
          description: 서버 에러

  /auth/logout:
    post:
      tags:
        - Auth
      summary: 사용자 로그아웃
      description: 사용자 로그인 정보 삭제와 함께 사용자 로그아웃 진행
      parameters:
        - in: header
          name: x-refresh-token
          schema:
            type: string
          description: 리프레시 토큰
          required: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                accountName:
                  type: string
                  description: 사용자 아이디
                  example: "user123"
      responses:
        '200':
          description: 로그아웃 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    description: 로그아웃 성공을 알리는 코드
                    example: "LOGOUT_SUCCEEDED"
        '500':
          description: 서버 에러

  /auth/refresh-token:
    post:
      tags:
        - Auth
      summary: 액세스 토큰 재발급
      description: 액세스 토큰이 만료된 경우 리프레시 토큰 검증을 통해 토큰 재발급 진행
      parameters:
        - in: header
          name: x-refresh-token
          schema:
            type: string
          description: 리프레시 토큰
          required: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                accountName:
                  type: string
                  description: 사용자 아이디
                  example: "user123"
      responses:
        '200':
          description: 토큰 재발급 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    description: 토큰 재발급 성공을 알리는 코드
                    example: "TOKEN_REISSUE_SUCCEEDED"
                  accessToken:
                    type: string
                    description: 재발급된 액세스 토큰
                  refreshToken:
                    type: string
                    description: 재발급된 리프레시 토큰
        '403':
          description: 토큰 재발급 실패
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    description: 토큰 재발급 실패 원인을 알리는 코드로, 리프레시 토큰이 유효하지 않거나 만료되었거나 없는 경우
                    example: "INVALID_REFRESH_TOKEN 또는 REFRESH_TOKEN_EXPIRED 또는 NO_REFRESH_TOKEN"            
        '500':
          description: 서버 에러

  /auth/email-auth/code:
    post:
      tags:
        - Auth
      summary: 이메일 본인인증 보안코드 전송
      description: 사용자 이메일로 본인인증을 위한 보안코드 전송
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                accountName:
                  type: string
                  description: 사용자 아이디
                  example: "user123"
                email:
                  type: string
                  format: email
                  description: 사용자 이메일
                  example: "useremail@example.com"
      responses:
        '201':
          description: 본인인증 메일 전송 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    description: 본인인증 메일 전송 성공을 알리는 코드
                    example: "AUTH_CODE_SENT"          
        '500':
          description: 서버 에러

  /auth/email-auth/verification:
    post:
      tags:
        - Auth
      summary: 이메일 본인인증 보안코드 전송
      description: 사용자 이메일로 본인인증을 위한 보안코드 전송
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  description: 사용자 이메일
                  example: "useremail@example.com"
                emailAuthCode:
                  type: string
                  description: 본인인증 보안코드 6자리 숫자 문자열
                  example: "012345"
      responses:
        '200':
          description: 본인인증 보안코드 검증 성공 또는 실패
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    description: 보안코드 검증 성공 또는 실패를 알리는 코드
                    example: "AUTH_CODE_VERIFICATION_SUCCEEDED 또는 AUTH_CODE_VERIFICATION_FAILED"
                  message:
                    type: string
                    description: 보안코드 검증에 실패한 경우에 한해 전송하는, 실패 원인을 알리는 메시지
                    example: "인증번호의 유효시간이 만료되었습니다. 다시 시도해 주세요. 또는 인증번호가 일치하지 않습니다."
        '500':
          description: 서버 에러

  /auth/recovery/account-name:
    get:
      tags:
        - Auth
      summary: 아이디 찾기
      description: 본인인증이 완료된 후, 본인인증을 완료한 이메일을 통해 사용자 아이디를 조회하여 사용자에게 보여주기
      parameters:
        - in: query
          name: email
          schema:
            type: string
          description: 사용자 이메일
          example: "useremail@example.com"
          required: true
      responses:
        '200':
          description: 아이디 조회 성공 또는 실패
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    description: 아이디 찾기(조회) 성공 또는 실패를 알리는 코드
                    example: "FIND_ID_SUCCEEDED 또는 FIND_ID_FAILED"
                  message:
                    type: string
                    description: 아이디 찾기(조회)에 실패한 경우에 한해 전송하는, 실패 원인을 알리는 메시지
                    example: "해당 이메일 주소로 가입된 계정이 없습니다."
        '500':
          description: 서버 에러

  /auth/recovery/password:
    put:
      tags:
        - Auth
      summary: 비밀번호 찾기
      description: 본인인증이 완료된 후, 기존 비밀번호를 확인하고 새 비밀번호로 변경
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                accountName:
                  type: string
                  description: 사용자 아이디
                  example: "user123"
                currentPassword:
                  type: string
                  format: password
                  description: 기존 비밀번호
                  example: "123456"
                newPassword:
                  type: string
                  format: password
                  description: 새 비밀번호
                  example: "123456"
      responses:
        '200':
          description: 비밀번호 찾기(변경) 성공 또는 실패
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    description: 비밀번호 찾기(변경) 성공 또는 실패를 알리는 코드
                    example: "CHANGE_PASSWORD_SUCCEEDED 또는 CHANGE_PASSWORD_FAILED"
                  message:
                    type: string
                    description: 비밀번호 찾기(변경) 성공 또는 실패를 알리는 메시지
                    example: "비밀번호가 변경되었습니다. 다시 로그인 해주세요. 또는 비밀번호가 일치하지 않습니다."
        '500':
          description: 서버 에러

  /auth/profile:
    get:
      tags:
        - Auth
      summary: 회원정보 불러오기
      description: 사용자가 마이페이지에서 본인의 정보를 조회할 수 있도록 회원정보 불러오기
      security:
        - bearerAuth: []
      parameters:
        - in: header
          name: x-refresh-token
          schema:
            type: string
          description: 리프레시 토큰
          required: true
        - in: query
          name: accountName
          schema:
            type: string
          description: 사용자 아이디
          example: "user123"
          required: true
      responses:
        '200':
          description: 회원정보 로드 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    description: 회원정보 로드 성공을 알리는 코드
                    example: "LOAD PROFILE SUCCEEDED"
        '401':
          description: 액세스 토큰이 만료된 상태
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    description: 액세스 토큰 만료를 알리는 코드
                    example: "ACCESS_TOKEN_EXPIRED"      
        '403':
          description: 액세스 토큰이 만료된 경우를 제외하고, 액세스 토큰이 없거나 유효하지 않거나 중복로그인이 발생한 경우
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    description: 액세스 토큰이 유효하지 않음 등의 결과를 알리는 코드
                    example: "NO_ACCESS_TOKEN 또는 INVALID_ACCESS_TOKEN 또는 INVALID_LOGIN_SESSION_KEY"
        '500':
          description: 서버 에러

  /auth/profile/password:
    patch:
      tags:
        - Auth
      summary: 비밀번호 변경
      description: 사용자 비밀번호 변경
      security:
        - bearerAuth: []
      parameters:
        - in: header
          name: x-refresh-token
          schema:
            type: string
          description: 리프레시 토큰
          required: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                accountName:
                  type: string
                  description: 사용자 아이디
                  example: "user123"
                currentPassword:
                  type: string
                  format: password
                  description: 기존 비밀번호
                  example: "123456"
                newPassword:
                  type: string
                  format: password
                  description: 새 비밀번호
                  example: "123456"
      responses:
        '200':
          description: 비밀번호 변경 성공 또는 실패
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    description: 비밀번호 변경 성공 또는 실패를 알리는 코드
                    example: "CHANGE_PASSWORD_SUCCEEDED 또는 CHANGE_PASSWORD_FAILED"
                  message:
                    type: string
                    description: 비밀번호 변경 성공 또는 실패를 알리는 메시지
                    example: "비밀번호가 변경되었습니다. 다시 로그인 해주세요. 또는 비밀번호가 일치하지 않습니다."
        '401':
          description: 액세스 토큰이 만료된 상태
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    description: 액세스 토큰 만료를 알리는 코드
                    example: "ACCESS_TOKEN_EXPIRED"      
        '403':
          description: 액세스 토큰이 만료된 경우를 제외하고, 액세스 토큰이 없거나 유효하지 않거나 중복로그인이 발생한 경우
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    description: 액세스 토큰이 유효하지 않음 등의 결과를 알리는 코드
                    example: "NO_ACCESS_TOKEN 또는 INVALID_ACCESS_TOKEN 또는 INVALID_LOGIN_SESSION_KEY"
        '500':
          description: 서버 에러

  /auth/profile/email:
    put:
      tags:
        - Auth
      summary: 이메일 변경
      description: 사용자 이메일 변경
      security:
        - bearerAuth: []
      parameters:
        - in: header
          name: x-refresh-token
          schema:
            type: string
          description: 리프레시 토큰
          required: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                accountName:
                  type: string
                  description: 사용자 아이디
                  example: "user123"
                newEmail:
                  type: string
                  format: email
                  description: 새 이메일
                  example: "useremail@example.com"
      responses:
        '200':
          description: 이메일 변경 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    description: 이메일 변경 성공을 알리는 코드
                    example: "EMAIL_UPDATED"
        '401':
          description: 액세스 토큰이 만료된 상태
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    description: 액세스 토큰 만료를 알리는 코드
                    example: "ACCESS_TOKEN_EXPIRED"      
        '403':
          description: 액세스 토큰이 만료된 경우를 제외하고, 액세스 토큰이 없거나 유효하지 않거나 중복로그인이 발생한 경우
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    description: 액세스 토큰이 유효하지 않음 등의 결과를 알리는 코드
                    example: "NO_ACCESS_TOKEN 또는 INVALID_ACCESS_TOKEN 또는 INVALID_LOGIN_SESSION_KEY"
        '500':
          description: 서버 에러

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
