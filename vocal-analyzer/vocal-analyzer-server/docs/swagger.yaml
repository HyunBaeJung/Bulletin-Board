openapi: 3.0.0
info:
  title: Vocal Analyzer API
  description: 당신의 목소리를 분석해드립니다.
  version: '1.0.0'
servers:
  - url: http://localhost:8000
    description: Vocal Analyzer API Server
paths:
  /auth/join:
    post:
      tags:
        - Auth
      summary: 회원가입
      description: 사용자가 제출한 사용자 정보로 회원가입 진행
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                accountName:
                  type: string
                  description: 사용자 아이디
                  example: "user123"
                password:
                  type: string
                  description: 비밀번호
                  format: password
                  example: "123456"
                realName:
                  type: string
                  description: 사용자 이름
                  example: "홍길동"
                birthday:
                  type: string
                  description: 생년월일 8자리(YYYYMMDD)
                  example: "19990101"
                gender:
                  type: string
                  description: 성별
                  example: "male"
                  enum: ["male", "female"]
                email:
                  type: string
                  format: email
                  description: 사용자 이메일
                  example: "useremail@example.com"
              required:
                - accountName
                - password
                - realName
                - birthday
                - gender
                - email
      responses:
        '200':
          description: 회원가입 실패
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    description: 회원가입 결과를 알리는 코드
                  message:
                    type: string
                    description: 회원가입 결과에 대한 원인을 알리는 메시지
              examples:
                example1:
                  summary: 회원가입 실패 - 이미 가입된 계정
                  value: {
                    "code": "JOIN_FAILED",
                    "message": "이미 가입된 회원입니다.",
                  }
        '201':
          description: 회원가입 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    description: 회원가입 결과를 알리는 코드
                  message:
                    type: string
                    description: 회원가입 결과에 대한 원인을 알리는 메시지
              examples:
                example1:
                  summary: 회원가입 성공
                  value: {
                    "code": "JOIN_SUCCEEDED",
                    "message": "회원가입이 완료되었습니다. 로그인 해주세요.",
                  }
        '403':
          description: 이미 로그인 된 상태에서 회원가입을 진행한 경우
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    description: 로그인 및 로그아웃 상태 여부를 알리는 코드
              examples:
                example1:
                  summary: 이미 로그인 된 상태
                  value: {
                    "code": "IS_LOGGED_IN",
                  }
        '500':
          description: 서버 에러

  /auth/withdrawal:
    delete:
      tags:
        - Auth
      summary: 회원탈퇴
      description: 데이터베이스에서 사용자 데이터를 삭제하여 회원탈퇴 진행
      security:
        - bearerAuth: []
      parameters:
        - in: header
          name: x-refresh-token
          schema:
            type: string
          description: 리프레시 토큰
          required: true
        - in: query
          name: accountName
          schema:
            type: string
          description: 사용자 아이디
          example: "user123"
          required: true
      responses:
        '200':
          description: 회원탈퇴 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    description: 회원탈퇴 결과를 알리는 코드
              examples: 
                example1:
                  summary: 회원탈퇴 성공
                  value: {
                    "code": "WITHDRAWAL SUCCEEDED",
                  } 
        '401':
          description: 액세스 토큰이 만료된 상태
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    description: 액세스 토큰 검증 결과를 알리는 코드
              examples: 
                example1:
                  summary: 액세스 토큰 만료
                  value: {
                    "code": "ACCESS_TOKEN_EXPIRED",
                  }     
        '403':
          description: 액세스 토큰이 만료된 경우를 제외하고, 액세스 토큰이 없거나 유효하지 않거나 중복로그인이 발생한 경우
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    description: 액세스 토큰 검증 결과를 알리는 코드
              examples:
                example1:
                  summary: 액세스 토큰이 없음
                  value: {
                    "code": "NO_ACCESS_TOKEN",
                  }
                example2:
                  summary: 중복로그인 발생
                  value: {
                    "code": "INVALID_LOGIN_SESSION_KEY",
                  }
                example3:
                  summary: 액세스 토큰이 유효하지 않음
                  value: {
                    "code": "INVALID_ACCESS_TOKEN",
                  }
        '500':
          description: 서버 에러

  /auth/login:
    post:
      tags:
        - Auth
      summary: 사용자 로그인
      description: 사용자 아이디와 비밀번호 입력하여 로그인을 진행
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                accountName:
                  type: string
                  description: 사용자 아이디
                  example: "user123"
                password:
                  type: string
                  description: 비밀번호
                  format: password
                  example: "123456"
              required:
                - accountName
                - password
      responses:
        '200':
          description: 로그인 성공 또는 실패
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    description: 로그인 결과를 알리는 코드
                  message:
                    type: string
                    description: 로그인에 실패한 경우에 한해 전송하는, 로그인 실패 원인을 알리는 메시지
                  loginId:
                    type: string
                    description: 로그인에 성공한 경우에 한해 전송하는, 클라이언트 세션스토리지에 저장할 사용자 아이디
                  accessToken:
                    type: string
                    description: 로그인에 성공한 경우에 한해 전송하는, 액세스 토큰
                  refreshToken:
                    type: string
                    description: 로그인에 성공한 경우에 한해 전송하는, 리프레시 토큰
              example:
                example1:
                  summary: 로그인 성공
                  value: {
                    "code": "LOGIN_SUCCEEDED",
                    "loginId": user123,
                    "accessToken": "accessToken 문자열",
                    "refreshToken": "refreshToken 문자열",
                  }
                example2:
                  summary: 로그인 실패 - 가입되지 않은 계정
                  value: {
                    "code": "LOGIN_FAILED",
                    "message": "가입되지 않은 계정입니다.",
                  }
                example3:
                  summary: 로그인 실패 - 비밀번호 불일치
                  value: {
                    "code": "LOGIN_FAILED",
                    "message": "비밀번호가 일치하지 않습니다.",
                  }
        '403':
          description: 이미 로그인 된 상태에서 회원가입을 진행한 경우
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    description: 로그인 및 로그아웃 상태 여부를 알리는 코드
              examples:
                example1:
                  summary: 이미 로그인 된 상태
                  value: {
                    "code": "IS_LOGGED_IN",
                  }
        '500':
          description: 서버 에러

  /auth/logout:
    post:
      tags:
        - Auth
      summary: 사용자 로그아웃
      description: 사용자 로그인 정보 삭제와 함께 사용자 로그아웃 진행
      parameters:
        - in: header
          name: x-refresh-token
          schema:
            type: string
          description: 리프레시 토큰
          required: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                accountName:
                  type: string
                  description: 사용자 아이디
                  example: "user123"
      responses:
        '200':
          description: 로그아웃 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    description: 로그아웃 결과를 알리는 코드
              examples:
                example1:
                  summary: 로그아웃 성공
                  value: {
                    "code": "LOGOUT_SUCCEEDED",
                  }
        '500':
          description: 서버 에러

  /auth/refresh-token:
    post:
      tags:
        - Auth
      summary: 액세스 토큰 재발급
      description: 액세스 토큰이 만료된 경우 리프레시 토큰 검증을 통해 토큰 재발급 진행
      parameters:
        - in: header
          name: x-refresh-token
          schema:
            type: string
          description: 리프레시 토큰
          required: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                accountName:
                  type: string
                  description: 사용자 아이디
                  example: "user123"
              required:
                - accountName
      responses:
        '200':
          description: 토큰 재발급 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    description: 토큰 재발급 결과를 알리는 코드
                  accessToken:
                    type: string
                    description: 토큰 재발급에 성공한 경우에 한해 전송하는, 재발급된 액세스 토큰
                  refreshToken:
                    type: string
                    description: 토큰 재발급에 성공한 경우에 한해 전송하는, 재발급된 리프레시 토큰
              examples:
                example1:
                  summary:
                  value: {
                    "code": "TOKEN_REISSUE_SUCCEEDED",
                    "accessToken": "accessToken 문자열",
                    "refreshToken": "refreshToken 문자열",
                  }
        '403':
          description: 토큰 재발급 실패
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    description: 토큰 재발급 결과를 알리는 코드
              example:
                example1:
                  summary: Redis에 해당 사용자의 리프레시 토큰 데이터가 존재하지 않음
                  value: {
                    "code": "REFRESH_TOKEN_NOT_FOUND",
                  }
                example2:
                  summary: Redis에 저장된 사용자의 리프레시 토큰 데이터와 요청 객체의 리프레시 토큰이 일치하지 않음
                  value: {
                    "code": "REFRESH_TOKEN_MISMATCH",
                  }
                example3:
                  summary: 리프레시 토큰이 만료됨
                  value: {
                    "code": "REFRESH_TOKEN_EXPIRED",
                  }
                example4:
                  summary: 리프레시 토큰이 유효하지 않음
                  value: {
                    "code": "INVALID_REFRESH_TOKEN",
                  }
                example5:
                  summary: 리프레시 토큰 없음
                  value: {
                    "code": "NO_REFRESH_TOKEN",
                  }
        '500':
          description: 서버 에러

  /auth/email-auth/code:
    post:
      tags:
        - Auth
      summary: 이메일 본인인증 인증코드 전송
      description: 사용자 이메일로 본인인증을 위한 인증코드 전송
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                accountName:
                  type: string
                  description: 사용자 아이디
                  example: "user123"
                email:
                  type: string
                  format: email
                  description: 사용자 이메일
                  example: "useremail@example.com"
                isRegisteredEmailRequired:
                  type: boolean
                  description: 이메일이 이미 가입되어 있어야 하는 경우(회원탈퇴 등)와 아닌 경우(회원가입 등)를 구분
              required:
                - email
                - isRegisteredEmailRequired
      responses:
        '201':
          description: 본인인증 메일 전송 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    description: 본인인증 메일 전송 결과를 알리는 코드
              examples:
                example1:
                  summary: 인증코드 전송 성공
                  value: { 
                    "code": "AUTH_CODE_SENT",
                  }
        '200':
          description: 본인인증 메일 전송 실패
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    description: 본인인증 메일 전송 결과를 알리는 코드
                  message:
                    type: string
                    description: 본인인증 메일 전송 결과에 대한 원인을 알리는 메시지
              examples:
                example1:
                  summary: 인증코드 전송 실패 - 이미 가입된 이메일(회원가입, 이메일 변경)
                  value: { 
                    "code": "AUTH_CODE_SEND_FAILED",
                    "message": "이미 해당 이메일로 가입된 정보가 존재합니다.",
                  }
                example2:
                  summary: 인증코드 전송 실패 - 일치하는 가입정보 없음(회원탈퇴, 아이디 및 비밀번호 찾기)
                  value: { 
                    "code": "AUTH_CODE_SEND_FAILED",
                    "message": "입력한 정보와 일치하는 회원정보가 없습니다.",
                  }
        '500':
          description: 서버 에러

  /auth/email-auth/verification:
    post:
      tags:
        - Auth
      summary: 이메일 본인인증 인증코드 전송
      description: 사용자 이메일로 본인인증을 위한 인증코드 전송
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  description: 사용자 이메일
                  example: "useremail@example.com"
                emailAuthCode:
                  type: string
                  description: 본인인증 인증코드 6자리 숫자 문자열
                  example: "012345"
              required:
                - email
                - emailAuthCode
      responses:
        '200':
          description: 본인인증 인증코드 검증 성공 또는 실패
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    description: 인증코드 검증 결과를 알리는 코드
                  message:
                    type: string
                    description: 인증코드 검증에 실패한 경우에 한해 전송하는, 인증코드 검증 결과에 대한 원인을 알리는 메시지
              examples:
                example1:
                  summary: 인증코드 검증 성공
                  value: { 
                    "code": "AUTH_CODE_VERIFICATION_SUCCEEDED",
                  }
                example2:
                  summary: 인증코드 검증 실패 - 유효시간 만료
                  value: { 
                    "code": "AUTH_CODE_VERIFICATION_FAILED", 
                    "message": "인증코드의 유효시간이 만료되었습니다. 다시 시도해 주세요.",
                  }
                example3:
                  summary: 인증코드 검증 실패 - 인증코드 불일치
                  value: { 
                    "code": "AUTH_CODE_VERIFICATION_FAILED", 
                    "message": "인증코드가 일치하지 않습니다.",
                  }
        '500':
          description: 서버 에러

  /auth/recovery/account-name:
    get:
      tags:
        - Auth
      summary: 아이디 찾기
      description: 본인인증이 완료된 후, 본인인증을 완료한 이메일을 통해 사용자 아이디를 조회하여 사용자에게 보여주기
      parameters:
        - in: query
          name: email
          schema:
            type: string
          description: 사용자 이메일
          example: "useremail@example.com"
          required: true
      responses:
        '200':
          description: 아이디 찾기 성공 또는 실패
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    description: 아이디 찾기 결과를 알리는 코드
                  accountName:
                    type: string
                    description: 아이디 찾기에 성공한 경우에 한해 전송하는, 사용자 아이디
                  message:
                    type: string
                    description: 아이디 찾기에 실패한 경우에 한해 전송하는, 아이디 찾기 결과에 대한 원인을 알리는 메시지
              examples:
                example1:
                  summary: 아이디 찾기 성공
                  value: {
                    "code": "FIND_ID_SUCCEEDED",
                    "accountName": "user123",
                  }
                example2:
                  summary: 아이디 찾기 실패
                  value: {
                    "code": "FIND_ID_FAILED",
                    "message": "해당 이메일 주소로 가입된 계정이 없습니다.",
                  }
        '500':
          description: 서버 에러

  /auth/recovery/password:
    put:
      tags:
        - Auth
      summary: 비밀번호 찾기
      description: 본인인증이 완료된 후, 기존 비밀번호를 확인하고 새 비밀번호로 변경
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                accountName:
                  type: string
                  description: 사용자 아이디
                  example: "user123"
                newPassword:
                  type: string
                  format: password
                  description: 새 비밀번호
                  example: "123456"
              required:
                - accountName
                - newPassword
      responses:
        '200':
          description: 비밀번호 찾기(변경) 성공 또는 실패
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    description: 비밀번호 찾기 결과를 알리는 코드
                  message:
                    type: string
                    description: 비밀번호 찾기 결과에 대한 원인을 알리는 메시지
              examples:
                example1:
                  summary: 비밀번호 찾기 성공
                  value: {
                    "code": "CHANGE_PASSWORD_SUCCEEDED",
                    "message": "비밀번호가 변경되었습니다. 다시 로그인 해주세요.",
                  }
        '500':
          description: 서버 에러

  /auth/profile:
    get:
      tags:
        - Auth
      summary: 회원정보 불러오기
      description: 사용자가 마이페이지에서 본인의 정보를 조회할 수 있도록 회원정보 불러오기
      security:
        - bearerAuth: []
      parameters:
        - in: header
          name: x-refresh-token
          schema:
            type: string
          description: 리프레시 토큰
          required: true
        - in: query
          name: accountName
          schema:
            type: string
          description: 사용자 아이디
          example: "user123"
          required: true
      responses:
        '200':
          description: 회원정보 로드 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    description: 회원정보 불러오기 결과를 알리는 코드
                  userInfo:
                    type: object
                    description: 회원정보 객체
                    properties:
                      accountName:
                        type: string
                      realName:
                        type: string
                      birthday:
                        type: string
                      gender:
                        type: string
                      email:
                        type: string
              examples:
                example1:
                  summary: 회원정보 불러오기 성공
                  value: {
                    "code": "LOAD PROFILE SUCCEEDED",
                    "userInfo": {
                      "accountName": "user123",
                      "realName": "홍길동",
                      "birthday": "19990101",
                      "gender": "male",
                      "email": "useremail@example.com",
                    }
                  }
        '401':
          description: 액세스 토큰이 만료된 상태
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    description: 액세스 토큰 검증 결과를 알리는 코드
              examples: 
                example1:
                  summary: 액세스 토큰 만료
                  value: {
                    "code": "ACCESS_TOKEN_EXPIRED",
                  }     
        '403':
          description: 액세스 토큰이 만료된 경우를 제외하고, 액세스 토큰이 없거나 유효하지 않거나 중복로그인이 발생한 경우
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    description: 액세스 토큰 검증 결과를 알리는 코드
              examples:
                example1:
                  summary: 액세스 토큰이 없음
                  value: {
                    "code": "NO_ACCESS_TOKEN",
                  }
                example2:
                  summary: 중복로그인 발생
                  value: {
                    "code": "INVALID_LOGIN_SESSION_KEY",
                  }
                example3:
                  summary: 액세스 토큰이 유효하지 않음
                  value: {
                    "code": "INVALID_ACCESS_TOKEN",
                  }
        '500':
          description: 서버 에러

  /auth/profile/password:
    patch:
      tags:
        - Auth
      summary: 비밀번호 변경
      description: 사용자 비밀번호 변경
      security:
        - bearerAuth: []
      parameters:
        - in: header
          name: x-refresh-token
          schema:
            type: string
          description: 리프레시 토큰
          required: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                accountName:
                  type: string
                  description: 사용자 아이디
                  example: "user123"
                currentPassword:
                  type: string
                  format: password
                  description: 기존 비밀번호
                  example: "123456"
                newPassword:
                  type: string
                  format: password
                  description: 새 비밀번호
                  example: "123456"
              required:
                - accountName
                - currentPassword
                - newPassword
      responses:
        '200':
          description: 비밀번호 찾기(변경) 성공 또는 실패
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    description: 비밀번호 찾기 결과를 알리는 코드
                  message:
                    type: string
                    description: 비밀번호 찾기 결과에 대한 원인을 알리는 메시지
              examples:
                example1:
                  summary: 비밀번호 찾기 성공
                  value: {
                    "code": "CHANGE_PASSWORD_SUCCEEDED",
                    "message": "비밀번호가 변경되었습니다. 다시 로그인 해주세요.",
                  }
                example2:
                  summary: 비밀번호 찾기 실패
                  value: {
                    "code": "CHANGE_PASSWORD_FAILED",
                    "message": "비밀번호가 일치하지 않습니다.",
                  }
        '401':
          description: 액세스 토큰이 만료된 상태
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    description: 액세스 토큰 검증 결과를 알리는 코드
              examples: 
                example1:
                  summary: 액세스 토큰 만료
                  value: {
                    "code": "ACCESS_TOKEN_EXPIRED",
                  }     
        '403':
          description: 액세스 토큰이 만료된 경우를 제외하고, 액세스 토큰이 없거나 유효하지 않거나 중복로그인이 발생한 경우
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    description: 액세스 토큰 검증 결과를 알리는 코드
              examples:
                example1:
                  summary: 액세스 토큰이 없음
                  value: {
                    "code": "NO_ACCESS_TOKEN",
                  }
                example2:
                  summary: 중복로그인 발생
                  value: {
                    "code": "INVALID_LOGIN_SESSION_KEY",
                  }
                example3:
                  summary: 액세스 토큰이 유효하지 않음
                  value: {
                    "code": "INVALID_ACCESS_TOKEN",
                  }
        '500':
          description: 서버 에러

  /auth/profile/email:
    put:
      tags:
        - Auth
      summary: 이메일 변경
      description: 사용자 이메일 변경
      security:
        - bearerAuth: []
      parameters:
        - in: header
          name: x-refresh-token
          schema:
            type: string
          description: 리프레시 토큰
          required: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                accountName:
                  type: string
                  description: 사용자 아이디
                  example: "user123"
                newEmail:
                  type: string
                  format: email
                  description: 새 이메일
                  example: "useremail@example.com"
      responses:
        '200':
          description: 이메일 변경 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    description: 이메일 변경 결과를 알리는 코드
              examples:
                example1:
                  summary: 이메일 변경 성공
                  value: {
                    "code": "EMAIL_UPDATED",
                  }
        '401':
          description: 액세스 토큰이 만료된 상태
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    description: 액세스 토큰 검증 결과를 알리는 코드
              examples: 
                example1:
                  summary: 액세스 토큰 만료
                  value: {
                    "code": "ACCESS_TOKEN_EXPIRED",
                  }     
        '403':
          description: 액세스 토큰이 만료된 경우를 제외하고, 액세스 토큰이 없거나 유효하지 않거나 중복로그인이 발생한 경우
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    description: 액세스 토큰 검증 결과를 알리는 코드
              examples:
                example1:
                  summary: 액세스 토큰이 없음
                  value: {
                    "code": "NO_ACCESS_TOKEN",
                  }
                example2:
                  summary: 중복로그인 발생
                  value: {
                    "code": "INVALID_LOGIN_SESSION_KEY",
                  }
                example3:
                  summary: 액세스 토큰이 유효하지 않음
                  value: {
                    "code": "INVALID_ACCESS_TOKEN",
                  }
        '500':
          description: 서버 에러

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
